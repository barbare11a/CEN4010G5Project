package com.example.accessingdatamysql.Controller;

import com.example.accessingdatamysql.Classes.Comment;
import com.example.accessingdatamysql.Classes.User;
import com.example.accessingdatamysql.Repositories.UserRepository;
import com.example.accessingdatamysql.Repositories.CommentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.text.SimpleDateFormat;
import java.util.Date;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/comment") // This means URL's start with /comment (after Application path)
public class CommentController {
	@Autowired// This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private CommentRepository commentRepository;

	@Autowired
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewComment (@RequestParam String username,
			@RequestParam String password, @RequestParam String bookname,
			@RequestParam String comment) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if(!userRepository.findByName(username).isPresent()) {
			return "User does not exist";
		}
		User n = userRepository.findByName(username).get();
		if(!password.equals(n.getPassword())){
			return "incorrect password";
		}
		Comment x = new Comment();
		x.setUser(username);
		x.setBook(bookname);
		x.setValue(comment);
		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		Date date = new Date();
		String dateString = formatter.format(date).toString();
		x.setDate(dateString);
		commentRepository.save(x);
		return "success";
	}

	@DeleteMapping(path="/remove") // Map ONLY POST Requests
	public @ResponseBody String removeComment (@RequestParam Integer id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		commentRepository.deleteById(id);
		return "removed";
	}

	@DeleteMapping(path="/removeAll") // Map ONLY POST Requests
	public @ResponseBody String removeAllComments () {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		commentRepository.deleteAll();
		return "removed all entries";
	}

	@PutMapping(path="/update") // Map ONLY POST Requests
	public @ResponseBody String updateComment (@RequestParam String name,
											   @RequestParam String value) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Comment n = commentRepository.findByName(name);
		n.setValue(value);
		commentRepository.save(n);
		return "updated";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Comment> getAllComments() {
		// This returns a JSON or XML with the users
		return commentRepository.findAll();
	}

	@GetMapping(path="/allFrom")
	public @ResponseBody Iterable<Comment> getAllComments(@RequestParam String name) {
		return commentRepository.findAllByName(name);
	}
}
