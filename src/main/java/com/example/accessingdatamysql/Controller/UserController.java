package com.example.accessingdatamysql.Controller;

import com.example.accessingdatamysql.Classes.CreditCard;
import com.example.accessingdatamysql.Classes.User;
import com.example.accessingdatamysql.Repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class  UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String username,
		@RequestParam String password, @RequestParam(required = false) String email,
		@RequestParam(required = false) String address) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User n = new User();
		n.setName(username);
		n.setPassword(password);
		n.setEmail(email);
		n.setAddress(address);

		userRepository.save(n);
		return "saved";
	}

	@DeleteMapping(path="/remove") // Map ONLY POST Requests
	public @ResponseBody String removeUser (@RequestParam Integer id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		userRepository.deleteById(id);
		return "removed";
	}

	@DeleteMapping(path="/removeAll") // Map ONLY POST Requests
	public @ResponseBody String removeAllUsers () {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		userRepository.deleteAll();
		return "removed all entries";
	}

	@PutMapping(path="/update") // Map ONLY POST Requests
	public @ResponseBody String updateUser (@RequestParam(required = false) String name,
		@RequestParam(required = false) String password, @RequestParam String email,
		@RequestParam(required = false) String address) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User n = userRepository.findByEmail(email).get();
		n.setName(name);
		n.setAddress(address);
		userRepository.save(n);
		return "updated";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/one")
	public @ResponseBody User getUser(@RequestParam String name) {
		// This returns a JSON or XML with the users
		return userRepository.findByName(name).get();
	}
}
