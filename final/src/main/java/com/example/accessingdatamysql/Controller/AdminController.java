package com.example.accessingdatamysql.Controller;

import com.example.accessingdatamysql.Classes.Admin;
import com.example.accessingdatamysql.Classes.Author;
import com.example.accessingdatamysql.Repositories.AdminRepository;
import com.example.accessingdatamysql.Repositories.AuthorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/admin") // This means URL's start with /user (after Application path)
public class AdminController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private AdminRepository adminRepository;

	@Autowired
	private AuthorRepository authorRepository;

	@PostMapping(path="/addAdmin") // Map ONLY POST Requests
	public @ResponseBody String addNewAdmin (@RequestParam String name, @RequestParam String password,
											@RequestParam String email, @RequestParam Integer value) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Admin n = new Admin();
		n.setName(name);
		n.setPassword(password);
		n.setEmail(email);
		n.setValue(value);
		adminRepository.save(n);
		return "saved";
	}

	@PostMapping(path="/addAuthor") // Map ONLY POST Requests
	public @ResponseBody String addNewAuthor (@RequestParam String firstName, @RequestParam String lastName,
											 @RequestParam String biography, @RequestParam String publisher) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Author n = new Author();
		n.setFirstName(firstName);
		n.setLastName(lastName);
		authorRepository.save(n);
		return "saved";
	}
	@GetMapping(path="/allAuthors")
	public @ResponseBody Iterable<Author> getAllAuthors() {
		// This returns a JSON or XML with the users
		return authorRepository.findAll();
	}

	@DeleteMapping(path="/remove") // Map ONLY POST Requests
	public @ResponseBody String removeAdmin (@RequestParam Integer id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		adminRepository.deleteById(id);
		return "removed";
	}

	@DeleteMapping(path="/removeAll") // Map ONLY POST Requests
	public @ResponseBody String removeAllAdmin () {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		adminRepository.deleteAll();
		return "removed all entries";
	}

	@PutMapping(path="/update") // Map ONLY POST Requests
	public @ResponseBody String updateAdmin (@RequestParam String name
			, @RequestParam String email, @RequestParam Integer value) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Admin n = adminRepository.findById(value).get();
		n.setName(name);
		n.setEmail(email);
		n.setValue(value);
		adminRepository.save(n);
		return "updated";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Admin> getAllUsers() {
		// This returns a JSON or XML with the users
		return adminRepository.findAll();
	}
	@GetMapping(path="/getThisAuthor")
	public @ResponseBody Author getAuthor(@RequestParam String firstName, @RequestParam String lastName) {
		// This returns a JSON or XML with the users

		return authorRepository.findByFirstnameAndLastname(firstName,lastName).get();
	}

}
